facet_grid(. ~ Class) +
ggtitle(y),
list('V1', 'V2', 'V3', 'V4', 'V5'),
list(' handicapped-infants',
'water-project-cost-sharing',
'adoption-of-the-budget-resolution',
'physician-fee-freeze',
'el-salvador-aid'))
data(HouseVotes84)
require(e1071)
model <- naiveBayes(Class ~ ., data = HouseVotes84)
party = predict(model, HouseVotes84[1:10,])
nums = predict(model, HouseVotes84[1:10,], type = "raw")
data.frame(party = HouseVotes84$Class[1:10], predicted = party, Democrat = nums[,1], Republican = nums[,2])
pred <- predict(model, HouseVotes84)
table(pred, HouseVotes84$Class)
model <- naiveBayes(Class ~ ., data = HouseVotes84, laplace = 3)
pred <- predict(model, HouseVotes84[,-1])
table(pred, HouseVotes84$Class)
N <- 1000
x <- 1:N
epsilon <- rnorm(N, 0, 1)
y <- x + epsilon
path = 'C:\\Users\\rr657c\\Documents\UW\\Data Science Certificate\\DataScience350\\Lecture9'
full.path = file.path(path, 'example.bug')
jags.mod.reg <- jags.model(full.path,
data = list('x' = x,
'y' = y,
'N' = N),
n.chains = 4,
n.adapt = 1000)
path = 'C:\\Users\\rr657c\\Documents\\UW\\Data Science Certificate\\DataScience350\\Lecture9'
full.path = file.path(path, 'example.bug')
jags.mod.reg <- jags.model(full.path,
data = list('x' = x,
'y' = y,
'N' = N),
n.chains = 4,
n.adapt = 1000)
jags.mod.reg <- jags.model(full.path,
data = list('x' = x,
'y' = y,
'N' = N),
n.chains = 4,
n.adapt = 1000)
full.path = file.path('C:\\Users\\rr657c\\jags-terminal', 'example.bug')
jags.mod.reg <- jags.model(full.path,
data = list('x' = x,
'y' = y,
'N' = N),
n.chains = 4,
n.adapt = 1000)
path = 'C:\\Users\\rr657c\\Documents\\UW\\Data Science Certificate\\DataScience350\\Lecture9'
full.path = file.path(path, 'example.bug')
jags.mod.reg <- jags.model('C:\\Users\\rr657c\\jags-terminal',
data = list('x' = x,
'y' = y,
'N' = N),
n.chains = 4,
n.adapt = 1000)
getwd()
path = 'C:\\Users\\rr657c\\Documents\\UW\\Data Science Certificate\\DataScience350\\Lecture9'
full.path = file.path(path, 'example.bug')
jags.mod.reg <- jags.model(full.path,
data = list('x' = x,
'y' = y,
'N' = N),
n.chains = 4,
n.adapt = 1000)
jags.mod.reg <- jags.model('C:\\Users\\rr657c',
data = list('x' = x,
'y' = y,
'N' = N),
n.chains = 4,
n.adapt = 1000)
jags.mod.reg <- jags.model('C:\\Users\\rr657c\\jags-terminal',
data = list('x' = x,
'y' = y,
'N' = N),
n.chains = 4,
n.adapt = 1000)
path = 'C:\\Users\\rr657c\\Documents\\UW\\Data Science Certificate\\DataScience350\\Lecture9'
full.path = file.path(path, 'example.bug')
jags.mod.reg <- jags.model('C:\\Users\\rr657c\\jags-terminal',
data = list('x' = x,
'y' = y,
'N' = N),
n.chains = 4,
n.adapt = 1000)
jags.mod.reg <- jags.model(full.path,
data = list('x' = x,
'y' = y,
'N' = N),
n.chains = 4,
n.adapt = 1000)
jags.mod.reg <- jags.model(full.path,
data = list('x' = x,
'y' = y,
'N' = N),
n.chains = 4,
n.adapt = 1000)
?load
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
require(dplyr)
load("MAJORS1012")
expand.grid()
expand.grid(2,2)
expand.grid(3,3)
expand.grid(0,3)
i <- expand.grid(3,3)
View(i)
View(i)
setwd("C:\\Users\\rr657c\\Documents\\UW\\Data Science Certificate\\DataScience450\\Capstone")
# Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
library(ggplot2)
library(reshape2)
library(data.table)
library(tidyverse)
library(lubridate)
library(scales)
library(corrplot)
library(DT)
library(caret)
Loaddata <- function(file)
{
#browser()
## Read the csv file
Dataload <- read.csv(file, header = TRUE,stringsAsFactors = FALSE)
# fread function is more efficent for larger data file and it creates a data table not a data frame in the process.
#Dataload <- fread(file, stringsAsFactors=TRUE)
## Remove cases or rows with missing values. In this case we keep the
## rows which do not have nas.
Dataload[complete.cases(Dataload), ]
return(Dataload)
}
# Load the file.
testdt <- Loaddata('test.csv')
traindt <- Loaddata('train.csv')
miss_pct <- map_dbl(traindt, function(x) { round((sum(is.na(x)) / length(x)) * 100, digits = 1) })
miss_pct <- miss_pct[miss_pct > 0]
data.frame(miss=miss_pct, var=names(miss_pct), row.names=NULL) %>%
ggplot(aes(x=reorder(var, -miss), y=miss)) +
geom_bar(stat='identity', fill='red') +
labs(x='', y='% missing', title='Percent missing data by feature') +
theme(axis.text.x=element_text(angle=90, hjust=1))
missing <- data.frame(sapply(traindt, function(x) sum(is.na(x))*100/length(x)))
missing$feature <- names(traindt)
missing$num <- c(1:nrow(missing))
View(missing)
View(missing)
colnames(missing) <- c("missing_ratio", "feature", "num")
missing <- missing[, c("num", "feature","missing_ratio")]
print(missing[missing$missing_ratio != 0,], row.names = F)
traindt %>%
mutate(month=month(timestamp)) %>%
group_by(month) %>%
summarize(med_price=median(price_doc)) %>%
ggplot(aes(x=as.integer(month), y=med_price)) +
geom_line(color='red', stat='identity') +
geom_point(color='red', size=2) +
scale_x_continuous(breaks=seq(1,12,1)) +
labs(x='Month', title='Price by month of year')
traindt %>%
mutate(year=year(timestamp)) %>%
group_by(year) %>%
summarize(med_price=median(price_doc)) %>%
ggplot(aes(x=year, y=med_price)) +
geom_line(color='red', stat='identity') +
geom_point(color='red', size=2) +
labs(x='Year', title='Price by year')
nrow(missing[missing$missing_ratio != 0,])
insignificant <- nearZeroVar(traindt)
print(names(traindt[ , insignificant]))
traindt$date <- as.POSIXct(strptime(traindt$timestamp, format = "%Y-%m-%d"))
traindt$day <- as.integer(format(traindt$date, "%d")) # day
traindt$month <- as.factor(format(traindt$date, "%m")) # month
traindt$year <- as.integer(format(traindt$date, "%Y")) # year
traindt$weekday <- as.factor(format(traindt$date, "%u")) # weekday
traindt$yearmonth <- paste0(traindt$year, traindt$month)
traindt$timestamp <- NULL
traindt$date <- NULL
ggplot(data = traindt, aes(x = as.factor(day), y = price_doc)) + geom_boxplot(fill = "#5C7457") + labs(title = "Date of the month vs Price", x = "Date", y = "Price")
ggplot(data = traindt, aes(x = as.factor(month), y = price_doc)) + geom_boxplot(fill = "#EAC435") + labs(title = "Month vs Price", x = "Month", y = "Price")
ggplot(data = traindt, aes(x = as.factor(year), y = price_doc)) +
geom_boxplot(fill = "#345995") +
coord_cartesian(ylim = c(0,10000000)) + labs(title = "Year vs Price", x = "Year", y = "Price")
ggplot(data = traindt, aes(x = as.factor(weekday), y = price_doc)) + geom_boxplot(fill = "#E40066") + labs(title = "Day of the week vs Price", x = "Day", y = "Price")
str(testdt)
testcount <- nrow(testdt)
str(traindt)
traincount <-nrow(traindt)
head(traindt)
lapply(traindt, summary)
hist(traindf$sub_area)
hist(traindt$sub_area)
View(traindt)
View(traindt)
unique(traindt$sub_area)
hist(traindt$num_room)
boxplot(price_doc~product_type,data=traindt, main="Price by product type",
xlab="Product Type", ylab="Price Doc")
ggplot(data = melt(traindt), mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~variable, scales = 'free_x')
plot(traindt)
?mutate
# Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
library(ggplot2)
library(reshape2)
library(data.table)
library(tidyverse)
library(lubridate)
library(scales)
library(corrplot)
library(DT)
library(caret)
Loaddata <- function(file)
{
#browser()
## Read the csv file
Dataload <- read.csv(file, header = TRUE,stringsAsFactors = FALSE)
# fread function is more efficent for larger data file and it creates a data table not a data frame in the process.
#Dataload <- fread(file, stringsAsFactors=TRUE)
## Remove cases or rows with missing values. In this case we keep the
## rows which do not have nas.
Dataload[complete.cases(Dataload), ]
return(Dataload)
}
# Load the file.
testdt <- Loaddata('test.csv')
traindt <- Loaddata('train.csv')
# Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
library(ggplot2)
library(reshape2)
library(data.table)
library(tidyverse)
library(lubridate)
library(scales)
library(corrplot)
library(DT)
library(caret)
Loaddata <- function(file)
{
#browser()
## Read the csv file
Dataload <- read.csv(file, header = TRUE,stringsAsFactors = FALSE)
# fread function is more efficent for larger data file and it creates a data table not a data frame in the process.
#Dataload <- fread(file, stringsAsFactors=TRUE)
## Remove cases or rows with missing values. In this case we keep the
## rows which do not have nas.
Dataload[complete.cases(Dataload), ]
return(Dataload)
}
# Load the file.
testdt <- Loaddata('test.csv')
traindt <- Loaddata('train.csv')
copytraintdt <- traindt
traindt <- traindt %>%
mutate(max_floor = as.numeric(max_floor), kitch_sq=as.numeric(kitch_sq), num_room=as.numeric(num_room), build_year=as.numeric(build_year), sub_area=as.factor(sub_area))
str(copytraintdt)
traindt <- traindt %>%
mutate(max_floor = as.numeric(max_floor), kitch_sq=as.numeric(kitch_sq), num_room=as.numeric(num_room), build_year=as.numeric(build_year), sub_area=as.factor(sub_area))
str(traindt)
train <- train %>%
filter(build_year < 2020 | is.na(build_year))
traindt <- traindt %>%
filter(build_year < 2020 | is.na(build_year))
traindt <- traindt %>% mutate(strange_full_sq = ifelse(full_sq <= 1, full_sq+1,0), full_sq = ifelse(full_sq > 800 | full_sq <= 1, NA, full_sq))
str(traindt)
traindt$strange_full_sq
nrow(traindt$strange_full_sq)
unique(traindt$strange_full_sq)
# Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
library(ggplot2)
library(reshape2)
library(data.table)
library(tidyverse)
library(lubridate)
library(scales)
library(corrplot)
library(DT)
library(caret)
Loaddata <- function(file)
{
#browser()
## Read the csv file
Dataload <- read.csv(file, header = TRUE,stringsAsFactors = FALSE)
# fread function is more efficent for larger data file and it creates a data table not a data frame in the process.
#Dataload <- fread(file, stringsAsFactors=TRUE)
## Remove cases or rows with missing values. In this case we keep the
## rows which do not have nas.
Dataload[complete.cases(Dataload), ]
return(Dataload)
}
# Load the file.
testdt <- Loaddata('test.csv')
traindt <- Loaddata('train.csv')
copytraintdt <- traindt
str(copytraintdt)
unique(traindt$full_sq)
traindt <- traindt %>%
mutate(max_floor = as.numeric(max_floor), kitch_sq=as.numeric(kitch_sq), num_room=as.numeric(num_room), build_year=as.numeric(build_year), sub_area=as.factor(sub_area))
traindt <- traindt %>%
filter(build_year < 2020 | is.na(build_year))
traindt <- traindt %>% mutate(strange_full_sq = ifelse(full_sq <= 1, full_sq+1,0), full_sq = ifelse(full_sq > 800 | full_sq <= 1, NA, full_sq))
str(traindt)
unique(copytraindt$life_sq)
unique(copytraintdt$life_sq)
train <- train %>% mutate(strange_life_sq = ifelse(life_sq <= 1, life_sq+1,0), strange_life_sq= ifelse(is.na(strange_life_sq),0,strange_life_sq), life_sq = ifelse(life_sq > 400 | life_sq <= 1, NA, life_sq))
traindt <- traindt %>% mutate(strange_life_sq = ifelse(life_sq <= 1, life_sq+1,0), strange_life_sq= ifelse(is.na(strange_life_sq),0,strange_life_sq), life_sq = ifelse(life_sq > 400 | life_sq <= 1, NA, life_sq))
unique(traindt$strange_full_sq)
unique(traindt$strange_life_sq)
train <- train %>% mutate(kitch_sq = as.numeric(kitch_sq),strange_kitch_sq = ifelse(kitch_sq <= 1, kitch_sq+1,0),kitch_sq = ifelse(kitch_sq > 200 | kitch_sq <= 1, NA, kitch_sq))
traindt <- traindt %>% mutate(kitch_sq = as.numeric(kitch_sq),strange_kitch_sq = ifelse(kitch_sq <= 1, kitch_sq+1,0),kitch_sq = ifelse(kitch_sq > 200 | kitch_sq <= 1, NA, kitch_sq))
traindt <- traindt %>% mutate(num_room = as.numeric(num_room))
traindt <- traindt %>% mutate(build_year = as.numeric(build_year), strange_build_year = ifelse(build_year <= 1, build_year+1,0), build_year = ifelse(build_year > 2018 | build_year < 1860, NA, build_year))
unique(traindt$strange_build_year)
train <- train %>% mutate(floor = ifelse(floor > 45, NA, floor))
traindt <- traindt %>% mutate(floor = ifelse(floor > 45, NA, floor))
traindt <- traindt %>% mutate(max_floor = as.numeric(max_floor), strange_max_floor = ifelse(max_floor <= 1, max_floor+1,0), max_floor = ifelse(max_floor > 60 | max_floor <=1, NA, max_floor))
traindt <- traindt %>% mutate(state = as.numeric(state), state = ifelse(state > 4, NA, state))
unique(traindt$state)
unique(copytraindt$state)
unique(copytraintdt$state)
# Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
library(ggplot2)
library(reshape2)
library(data.table)
library(tidyverse)
library(lubridate)
library(scales)
library(corrplot)
library(DT)
library(caret)
Loaddata <- function(file)
{
#browser()
## Read the csv file
Dataload <- read.csv(file, header = TRUE,stringsAsFactors = FALSE)
# fread function is more efficent for larger data file and it creates a data table not a data frame in the process.
#Dataload <- fread(file, stringsAsFactors=TRUE)
## Remove cases or rows with missing values. In this case we keep the
## rows which do not have nas.
Dataload[complete.cases(Dataload), ]
return(Dataload)
}
# Load the file.
testdt <- Loaddata('test.csv')
traindt <- Loaddata('train.csv')
copytraindt <- traindt
str(copytraintdt)
traindt <- traindt %>%
mutate(max_floor = as.numeric(max_floor), kitch_sq=as.numeric(kitch_sq), num_room=as.numeric(num_room), build_year=as.numeric(build_year), sub_area=as.factor(sub_area))
traindt <- traindt %>%
filter(build_year < 2020 | is.na(build_year))
traindt <- traindt %>% mutate(strange_full_sq = ifelse(full_sq <= 1, full_sq+1,0), full_sq = ifelse(full_sq > 800 | full_sq <= 1, NA, full_sq))
traindt <- traindt %>% mutate(strange_life_sq = ifelse(life_sq <= 1, life_sq+1,0), strange_life_sq= ifelse(is.na(strange_life_sq),0,strange_life_sq), life_sq = ifelse(life_sq > 400 | life_sq <= 1, NA, life_sq))
traindt <- traindt %>% mutate(kitch_sq = as.numeric(kitch_sq),strange_kitch_sq = ifelse(kitch_sq <= 1, kitch_sq+1,0),kitch_sq = ifelse(kitch_sq > 200 | kitch_sq <= 1, NA, kitch_sq))
traindt <- traindt %>% mutate(num_room = as.numeric(num_room))
traindt <- traindt %>% mutate(build_year = as.numeric(build_year), strange_build_year = ifelse(build_year <= 1, build_year+1,0), build_year = ifelse(build_year > 2018 | build_year < 1860, NA, build_year))
traindt <- traindt %>% mutate(floor = ifelse(floor > 45, NA, floor))
traindt <- traindt %>% mutate(max_floor = as.numeric(max_floor), strange_max_floor = ifelse(max_floor <= 1, max_floor+1,0), max_floor = ifelse(max_floor > 60 | max_floor <=1, NA, max_floor))
traindt <- traindt %>% mutate(state = as.numeric(state), state = ifelse(state > 4, NA, state))
str(traindt)
traindt <- traindt %>% mutate(material = as.factor(material), material = ifelse(material == 3, NA, material))
unique(copytraindt$material)
unique(copytraind$material)
unique(copytraindt$material)
# Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
library(ggplot2)
library(reshape2)
library(data.table)
library(tidyverse)
library(lubridate)
library(scales)
library(corrplot)
library(DT)
library(caret)
Loaddata <- function(file)
{
#browser()
## Read the csv file
Dataload <- read.csv(file, header = TRUE,stringsAsFactors = FALSE)
# fread function is more efficent for larger data file and it creates a data table not a data frame in the process.
#Dataload <- fread(file, stringsAsFactors=TRUE)
## Remove cases or rows with missing values. In this case we keep the
## rows which do not have nas.
Dataload[complete.cases(Dataload), ]
return(Dataload)
}
# Load the file.
testdt <- Loaddata('test.csv')
traindt <- Loaddata('train.csv')
copytraindt <- traindt
str(copytraindt)
traindt <- traindt %>%
mutate(max_floor = as.numeric(max_floor), kitch_sq=as.numeric(kitch_sq), num_room=as.numeric(num_room), build_year=as.numeric(build_year), sub_area=as.factor(sub_area))
traindt <- traindt %>%
filter(build_year < 2020 | is.na(build_year))
traindt <- traindt %>% mutate(strange_full_sq = ifelse(full_sq <= 1, full_sq+1,0), full_sq = ifelse(full_sq > 800 | full_sq <= 1, NA, full_sq))
traindt <- traindt %>% mutate(strange_life_sq = ifelse(life_sq <= 1, life_sq+1,0), strange_life_sq= ifelse(is.na(strange_life_sq),0,strange_life_sq), life_sq = ifelse(life_sq > 400 | life_sq <= 1, NA, life_sq))
traindt <- traindt %>% mutate(kitch_sq = as.numeric(kitch_sq),strange_kitch_sq = ifelse(kitch_sq <= 1, kitch_sq+1,0),kitch_sq = ifelse(kitch_sq > 200 | kitch_sq <= 1, NA, kitch_sq))
traindt <- traindt %>% mutate(num_room = as.numeric(num_room))
traindt <- traindt %>% mutate(build_year = as.numeric(build_year), strange_build_year = ifelse(build_year <= 1, build_year+1,0), build_year = ifelse(build_year > 2018 | build_year < 1860, NA, build_year))
traindt <- traindt %>% mutate(floor = ifelse(floor > 45, NA, floor))
traindt <- traindt %>% mutate(max_floor = as.numeric(max_floor), strange_max_floor = ifelse(max_floor <= 1, max_floor+1,0), max_floor = ifelse(max_floor > 60 | max_floor <=1, NA, max_floor))
traindt <- traindt %>% mutate(state = as.numeric(state), state = ifelse(state > 4, NA, state))
traindt <- traindt %>% mutate(material = as.factor(material), material = ifelse(material == 3, NA, material))
unique(copytraind$material)
unique(copytraindt$material)
unique(traindt$material)
train <- train %>% mutate(product_type = factor(product_type))
traindt <- traindt %>% mutate(product_type = factor(product_type))
train <- train %>% mutate(sub_area = factor(sub_area))
traindt <- traindt %>% mutate(sub_area = factor(sub_area))
train <- train %>% filter(kitch_sq < full_sq | is.na(kitch_sq))
traindt <- traindt %>% filter(kitch_sq < full_sq | is.na(kitch_sq))
traindt <- traindt %>% filter(kitch_sq < life_sq | is.na(kitch_sq))
traindt <- traindt %>% mutate(num_room = ifelse(num_room==0,NA,num_room))
unique(traindt$num_room)
?month
traindt <- traindt %>%
mutate(year_of_date = year(traindt$timestamp))
unique(traindt$year_of_date)
traindt <- traindt %>%
mutate(month_of_year = month(traindt$timestamp))
traindt <- traindt %>%
mutate(week_of_year = week(traindt$timestamp))
traindt <- traindt %>%
mutate(day_of_month = mday(traindt$timestamp))
train <- train %>%
mutate(day_of_week = wday(traindt$timestamp))
traindt <- traindt %>%
mutate(day_of_week = wday(traindt$timestamp))
unique(traindt$month_of_year)
unique(traindt$week_of_year)
traindt <- traindt %>%
mutate(floor_from_top = max_floor - floor)
traindt <- traindt %>%
mutate(floor_by_maxfloor = floor/max_floor)
traindt <- traindt %>%
mutate(roomsize = (life_sq-kitch_sq)/num_room)
traindt <- traindt %>%
mutate(life_proportion = life_sq/full_sq)
traindt <- traindt %>%
mutate(kitchen_proportion = kitch_sq/full_sq)
traindt <- traindt %>%
mutate(extra_area = full_sq - life_sq)
traindt <- traindt %>%
mutate(age_at_sale = interval(make_date(year=build_year),timestamp) / years(1))
?interval
?make_date
unique(traindt$build_year)
unique(copytraindt$build_year)
?count
count(traindt, vars = build_year)
count(traindt, c("state","build_year"))
count(traindt, vars = build_year)
unique(copytraindt$build_year)
count(traindt, vars = build_year)
count(traindt, vars = build_year, wt_var = 1)
count(traindt, vars = build_year, wt_var = 0)
count(traindt, vars = build_year, wt_var = 2)
count(traindt, vars = build_year, wt_var = state)
count(traindt, vars = build_year, wt_var = product_type)
count(traindt, vars = build_year, wt_var = sub_area)
count(traindt, vars = build_year, wt_var = product_type)
unique(traindt$age_at_sale)
traindt <- traindt %>%
mutate(age_at_sale_noyear = interval(make_date(year=build_year),timestamp))
traindt$age_at_sale
traindt[traindt$age_at_sale,traindt$age_at_sale_noyear]
traindt[age_at_sale,age_at_sale_noyear]
traindt[1:2]
traindt[traindt$age_at_sale:traindt$age_at_sale_noyear]
traindt$age_at_sale_noyear
traindt$age_at_sale
unique(traindt$age_at_sale_noyear)
?years
traindt <- traindt %>%
mutate(apartment_name = factor(str_c(sub_area,format(metro_km_avto,digits=3))))
library(stringr)
train <- train %>%
mutate(appartment_name = factor(str_c(sub_area,format(metro_km_avto,digits=3))))
train <- train %>%
mutate(appartment_name = factor(str_c(sub_area,format(metro_km_avto,digits=3))))
traindt <- traindt %>%
mutate(apartment_name = factor(str_c(sub_area,format(metro_km_avto,digits=3))))
traindt <- traindt %>%
group_by(apartment_name) %>%
tally() %>%
right_join(traindt,by="apartment_name")
