}
# Calculate TPR for all attributes
TPRAll <- Specificity(crosstabAll)
TPRAll
# Calculate TPR for selected attributes
TPR <- Specificity(crosstab)
TPR
# Calculate TPR for one attributes
TPROne <- Specificity(crosstabOne)
TPROne
#calculate FPR from Confusion MAtrix
FPR <- function(Table.X)
{
FPR.X <- (Table.X[1,2])/(Table.X[1,2]+Table.X[2,2])
return(FPR.X)
}
# Calculate FPR for all attributes
FPRAll <- FPR(crosstabAll)
FPRAll
# Calculate FPR for six attributes
FPRSix <- FPR(crosstab)
FPRSix
# Calculate FPR for one attributes
FPROne <- FPR(crosstabOne)
FPROne
#Calculate AUC
library(pROC)
roc_obj <- roc(TestWine$kind, kindPrediction)
auc(roc_obj)
roc_obj_All <- roc(TestWine$kind, kindPredictionAll)
auc(roc_obj_All)
roc_obj_One <- roc(TestWine$kind, kindPredictionOne)
auc(roc_obj_One)
FPRCheck <- 1- roc_obj$sensitivities
TPRCheck <- roc_obj$specificities
head(kindPrediction)
setwd('C:\\Users\\rr657c\\Documents\\UW\\Data Science Certificate\\DataScience450\\Lesson 3')
?complete.cases
rm(list=ls())
# Clear Console:
cat("\014")
# Set repeatable random seed.
set.seed(123)
#Load the dataset.
read.bank = function(file = 'Bank Data.csv'){
## Read the csv file
bank <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
bank[complete.cases(bank), ]
}
# Partition the data into test and training data sets.
PartitionExact = function(dataSet, fractionOfTest = 0.3)
{
#  browser()
random <-runif(nrow(dataSet))
quant <- quantile(random,fractionOfTest)
testFlag <- random <= quant
testingData <- dataSet[testFlag, ]
trainingData <- dataSet[!testFlag, ]
dataSetSplit <- list(trainingData=trainingData, testingData=testingData)
}
# Load and cleanse the csv file.
bank = read.bank()
#Check the structure of the dataset.
str(bank)
#Adding a new numerica attribute based on the YES/NO column.
bank$PEPNumeric <- as.numeric(bank$pep == "YES")
str(bank)
rm(list=ls())
# Clear Console:
cat("\014")
# Set repeatable random seed.
set.seed(123)
#Load the dataset.
read.bank = function(file = 'Bank Data.csv'){
## Read the csv file
bank <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
bank[complete.cases(bank), ]
}
# Partition the data into test and training data sets.
PartitionExact = function(dataSet, fractionOfTest = 0.3)
{
#  browser()
random <-runif(nrow(dataSet))
quant <- quantile(random,fractionOfTest)
testFlag <- random <= quant
testingData <- dataSet[testFlag, ]
trainingData <- dataSet[!testFlag, ]
dataSetSplit <- list(trainingData=trainingData, testingData=testingData)
}
# Load and cleanse the csv file.
bank = read.bank()
#Check the structure of the dataset.
str(bank)
x <- c('R', 'G', 'B', 'B', 'B', 'B', 'B', 'R', 'G', 'B', 'G', 'G', 'G')
isRed <- x == 'R'
isGreen <- x == 'G'
isBlue <- x == 'B'
isRed
isGreen
isBlue
isRed <- as.numeric(isRed)
isGreen <- as.numeric(isGreen)
isBlue <- as.numeric(isBlue)
isRed; isGreen; isBlue
data.frame(isRed, isGreen, isBlue)
rm(list=ls())
# Clear Console:
cat("\014")
# Set repeatable random seed.
set.seed(123)
#Load the dataset.
read.bank = function(file = 'Bank Data.csv'){
## Read the csv file
bank <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
bank[complete.cases(bank), ]
}
# Partition the data into test and training data sets.
PartitionExact = function(dataSet, fractionOfTest = 0.3)
{
#  browser()
random <-runif(nrow(dataSet))
quant <- quantile(random,fractionOfTest)
testFlag <- random <= quant
testingData <- dataSet[testFlag, ]
trainingData <- dataSet[!testFlag, ]
dataSetSplit <- list(trainingData=trainingData, testingData=testingData)
}
# Load and cleanse the csv file.
bank = read.bank()
#Check the structure of the dataset.
str(bank)
bank$pep <- as.numeric(bank$pep == "YES")
bank$sex <- as.numeric(bank$sex == "MALE")
bank$region[bank$region == "INNER_CITY"] <- 1
bank$region[bank$region == "TOWN"] <- 2
bank$region[bank$region == "RURAL"] <- 3
bank$region[bank$region == "SUBURBAN"] <- 4
bank$married <- as.numeric(bank$married == "YES")
bank$car <- as.numeric(bank$car == "YES")
bank$save_act <- as.numeric(bank$save_act == "YES")
bank$current_act <- as.numeric(bank$current_act == "YES")
bank$mortgage <- as.numeric(bank$mortgage == "YES")
str(bank)
rm(list=ls())
# Clear Console:
cat("\014")
# Set repeatable random seed.
set.seed(123)
#Load the dataset.
read.bank = function(file = 'Bank Data.csv'){
## Read the csv file
bank <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
bank[complete.cases(bank), ]
}
# Partition the data into test and training data sets.
PartitionExact = function(dataSet, fractionOfTest = 0.3)
{
#  browser()
random <-runif(nrow(dataSet))
quant <- quantile(random,fractionOfTest)
testFlag <- random <= quant
testingData <- dataSet[testFlag, ]
trainingData <- dataSet[!testFlag, ]
dataSetSplit <- list(trainingData=trainingData, testingData=testingData)
}
# Load and cleanse the csv file.
bank = read.bank()
#Check the structure of the dataset.
str(bank)
#Converting character columns to numeric.
bank$pep <- as.numeric(bank$pep == "YES")
bank$sex <- as.numeric(bank$sex == "MALE")
as.numeric(bank$region[bank$region == "INNER_CITY"]) <- 1
as.numeric(bank$region[bank$region == "TOWN"]) <- 2
as.numeric(bank$region[bank$region == "RURAL"]) <- 3
as.numeric(bank$region[bank$region == "SUBURBAN"]) <- 4
bank$married <- as.numeric(bank$married == "YES")
bank$car <- as.numeric(bank$car == "YES")
bank$save_act <- as.numeric(bank$save_act == "YES")
bank$current_act <- as.numeric(bank$current_act == "YES")
bank$mortgage <- as.numeric(bank$mortgage == "YES")
str(bank)
rm(list=ls())
# Clear Console:
cat("\014")
# Set repeatable random seed.
set.seed(123)
#Load the dataset.
read.bank = function(file = 'Bank Data.csv'){
## Read the csv file
bank <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
bank[complete.cases(bank), ]
}
# Partition the data into test and training data sets.
PartitionExact = function(dataSet, fractionOfTest = 0.3)
{
#  browser()
random <-runif(nrow(dataSet))
quant <- quantile(random,fractionOfTest)
testFlag <- random <= quant
testingData <- dataSet[testFlag, ]
trainingData <- dataSet[!testFlag, ]
dataSetSplit <- list(trainingData=trainingData, testingData=testingData)
}
# Load and cleanse the csv file.
bank = read.bank()
#Check the structure of the dataset.
str(bank)
#Converting character columns to numeric.
bank$pep <- as.numeric(bank$pep == "YES")
bank$sex <- as.numeric(bank$sex == "MALE")
bank$region[bank$region == "INNER_CITY"] <- as.numeric(1)
bank$region[bank$region == "TOWN"] <- as.numeric(2)
bank$region[bank$region == "RURAL"] <- as.numeric(3)
bank$region[bank$region == "SUBURBAN"] <- as.numeric(4)
bank$married <- as.numeric(bank$married == "YES")
bank$car <- as.numeric(bank$car == "YES")
bank$save_act <- as.numeric(bank$save_act == "YES")
bank$current_act <- as.numeric(bank$current_act == "YES")
bank$mortgage <- as.numeric(bank$mortgage == "YES")
str(bank)
rm(list=ls())
# Clear Console:
cat("\014")
# Set repeatable random seed.
set.seed(123)
#Load the dataset.
read.bank = function(file = 'Bank Data.csv'){
## Read the csv file
bank <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
bank[complete.cases(bank), ]
}
# Partition the data into test and training data sets.
PartitionExact = function(dataSet, fractionOfTest = 0.3)
{
#  browser()
random <-runif(nrow(dataSet))
quant <- quantile(random,fractionOfTest)
testFlag <- random <= quant
testingData <- dataSet[testFlag, ]
trainingData <- dataSet[!testFlag, ]
dataSetSplit <- list(trainingData=trainingData, testingData=testingData)
}
# Load and cleanse the csv file.
bank = read.bank()
#Check the structure of the dataset.
str(bank)
#Converting character columns to numeric.
bank$pep <- as.numeric(bank$pep == "YES")
bank$sex <- as.numeric(bank$sex == "MALE")
as.numeric(bank$region[bank$region == "INNER_CITY"]) <- 1
as.numeric(bank$region[bank$region == "TOWN"]) <- 2
as.numeric(bank$region[bank$region == "RURAL"]) <- 3
as.numeric(bank$region[bank$region == "SUBURBAN"]) <- 4
bank$married <- as.numeric(bank$married == "YES")
bank$car <- as.numeric(bank$car == "YES")
bank$save_act <- as.numeric(bank$save_act == "YES")
bank$current_act <- as.numeric(bank$current_act == "YES")
bank$mortgage <- as.numeric(bank$mortgage == "YES")
str(bank)
?as.numeric()
rm(list=ls())
# Clear Console:
cat("\014")
# Set repeatable random seed.
set.seed(123)
#Load the dataset.
read.bank = function(file = 'Bank Data.csv'){
## Read the csv file
bank <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
bank[complete.cases(bank), ]
}
# Partition the data into test and training data sets.
PartitionExact = function(dataSet, fractionOfTest = 0.3)
{
#  browser()
random <-runif(nrow(dataSet))
quant <- quantile(random,fractionOfTest)
testFlag <- random <= quant
testingData <- dataSet[testFlag, ]
trainingData <- dataSet[!testFlag, ]
dataSetSplit <- list(trainingData=trainingData, testingData=testingData)
}
# Load and cleanse the csv file.
bank = read.bank()
#Check the structure of the dataset.
str(bank)
#Converting character columns to numeric.
bank$pep <- as.numeric(bank$pep == "YES")
bank$sex <- as.numeric(bank$sex == "MALE")
bank$region[bank$region == "INNER_CITY"] <- 1
bank$region[bank$region == "TOWN"] <- 2
bank$region[bank$region == "RURAL"] <- 3
bank$region[bank$region == "SUBURBAN"] <- 4
as.numeric(bank$region)
bank$married <- as.numeric(bank$married == "YES")
bank$car <- as.numeric(bank$car == "YES")
bank$save_act <- as.numeric(bank$save_act == "YES")
bank$current_act <- as.numeric(bank$current_act == "YES")
bank$mortgage <- as.numeric(bank$mortgage == "YES")
str(bank)
rm(list=ls())
# Clear Console:
cat("\014")
# Set repeatable random seed.
set.seed(123)
#Load the dataset.
read.bank = function(file = 'Bank Data.csv'){
## Read the csv file
bank <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
bank[complete.cases(bank), ]
}
# Partition the data into test and training data sets.
PartitionExact = function(dataSet, fractionOfTest = 0.3)
{
#  browser()
random <-runif(nrow(dataSet))
quant <- quantile(random,fractionOfTest)
testFlag <- random <= quant
testingData <- dataSet[testFlag, ]
trainingData <- dataSet[!testFlag, ]
dataSetSplit <- list(trainingData=trainingData, testingData=testingData)
}
# Load and cleanse the csv file.
bank = read.bank()
#Check the structure of the dataset.
str(bank)
#Converting character columns to numeric.
bank$pep <- as.numeric(bank$pep == "YES")
bank$sex <- as.numeric(bank$sex == "MALE")
bank$region[bank$region == "INNER_CITY"] <- 1
bank$region[bank$region == "TOWN"] <- 2
bank$region[bank$region == "RURAL"] <- 3
bank$region[bank$region == "SUBURBAN"] <- 4
bank$region <- as.numeric(bank$region)
bank$married <- as.numeric(bank$married == "YES")
bank$car <- as.numeric(bank$car == "YES")
bank$save_act <- as.numeric(bank$save_act == "YES")
bank$current_act <- as.numeric(bank$current_act == "YES")
bank$mortgage <- as.numeric(bank$mortgage == "YES")
str(bank)
head(bank)
tail(bank)
lapply(bank, summary)
library(reshape2)
library(ggplot2)
ggplot(data = melt(bank), mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~variable, scales = 'free_x')
bankDataset = PartitionExact(bank)
Testbank <- bankDataset$testingData
Trainbank <-bankDataset$trainingData
nrow(Testbank)
head(Testbank)
nrow(Trainbank)
head(Trainbank)
formula <- PEPNumeric ~ . - pep
library(rpart)
banktree <- rpart(formula = formula, data = Trainbank,method="class")
library("rpart.plot")
rpart.plot(banktree)
formula <- PEP ~ .
library(rpart)
banktree <- rpart(formula = formula, data = Trainbank,method="class")
formula <- pep ~ .
library(rpart)
library(rpart)
banktree <- rpart(formula = formula, data = Trainbank,method="class")
library("rpart.plot")
rpart.plot(banktree)
PEPPrediction <- as.numeric(predict(banktree, newdata = Testbank, type="class"))
crosstabAll <- table(PEPPrediction, Testbank$PEPNumeric)
crosstabAll <- table(PEPPrediction, Testbank$pep)
crosstabAll
Specificity <- function(Table.X)
{
Specificity.X <- (Table.X[2,2])/(Table.X[1,2]+Table.X[2,2])
return(Specificity.X)
}
TPRAll <- Specificity(crosstabAll)
TPRAll
FPR <- function(Table.X)
{
FPR.X <- (Table.X[1,2])/(Table.X[1,2]+Table.X[2,2])
return(FPR.X)
}
FPRAll <- FPR(crosstabAll)
FPRAll
library(pROC)
roc_obj_All <- roc(Testbank$pep, PEPPredictionAll)
roc_obj_All <- roc(Testbank$pep, PEPPrediction)
auc(roc_obj_All)
rm(list=ls())
# Clear Console:
cat("\014")
# Set repeatable random seed.
set.seed(123)
#Load the dataset.
read.bank = function(file = 'Bank Data.csv'){
## Read the csv file
bank <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
bank[complete.cases(bank), ]
}
# Partition the data into test and training data sets.
PartitionExact = function(dataSet, fractionOfTest = 0.3)
{
#  browser()
random <-runif(nrow(dataSet))
quant <- quantile(random,fractionOfTest)
testFlag <- random <= quant
testingData <- dataSet[testFlag, ]
trainingData <- dataSet[!testFlag, ]
dataSetSplit <- list(trainingData=trainingData, testingData=testingData)
}
# Load and cleanse the csv file.
bank = read.bank()
#Check the structure of the dataset.
str(bank)
#Converting character columns to numeric.
bank$pep <- as.numeric(bank$pep == "YES")
bank$sex <- as.numeric(bank$sex == "MALE")
bank$region[bank$region == "INNER_CITY"] <- 1
bank$region[bank$region == "TOWN"] <- 2
bank$region[bank$region == "RURAL"] <- 3
bank$region[bank$region == "SUBURBAN"] <- 4
bank$region <- as.numeric(bank$region)
bank$married <- as.numeric(bank$married == "YES")
bank$car <- as.numeric(bank$car == "YES")
bank$save_act <- as.numeric(bank$save_act == "YES")
bank$current_act <- as.numeric(bank$current_act == "YES")
bank$mortgage <- as.numeric(bank$mortgage == "YES")
str(bank)
#check the data set header
head(bank)
tail(bank)
lapply(bank, summary)
#Data Exploration
library(reshape2)
library(ggplot2)
ggplot(data = melt(bank), mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~variable, scales = 'free_x')
#Split dataset into test and training data sets.
bankDataset = PartitionExact(bank)
Testbank <- bankDataset$testingData
Trainbank <-bankDataset$trainingData
nrow(Testbank)
head(Testbank)
nrow(Trainbank)
head(Trainbank)
formula <- pep ~ .
# Classification Tree with rpart
library(rpart)
# grow tree
banktree <- rpart(formula = formula, data = Trainbank,method="class")
#Plot tree using rpart.plot
library("rpart.plot")
rpart.plot(banktree)
#Use the model to make the predictions.
PEPPrediction <- as.numeric(predict(banktree, newdata = Testbank, type="class"))
#Calculate Confusion Matrix for all atributes.
crosstabAll <- table(PEPPrediction, Testbank$pep)
crosstabAll
#Calculate Specificity (TPR)
Specificity <- function(Table.X)
{
Specificity.X <- (Table.X[2,2])/(Table.X[1,2]+Table.X[2,2])
return(Specificity.X)
}
# Calculate TPR for all attributes
TPRAll <- Specificity(crosstabAll)
TPRAll
#calculate FPR from Confusion MAtrix
FPR <- function(Table.X)
{
FPR.X <- (Table.X[1,2])/(Table.X[1,2]+Table.X[2,2])
return(FPR.X)
}
# Calculate FPR for all attributes
FPRAll <- FPR(crosstabAll)
FPRAll
#Calculate AUC
library(pROC)
roc_obj_All <- roc(Testbank$pep, PEPPrediction)
auc(roc_obj_All)
formula3 <- pep ~ . - sex - region - current_act
banktree3 <- rpart(formula = formula3, data = Trainbank,method="class")
rpart.plot(banktree3)
rpart.plot(banktree3)
PEPPrediction3 <- as.numeric(predict(banktree3, newdata = Testbank, type="class"))
crosstab3 <- table(PEPPrediction3, Testbank$pep)
crosstab3
TPRA3 <- Specificity(crosstab3)
TPRA3
FPRAll <- FPR(crosstabAll)
FPRAll
FPR3 <- FPR(crosstab3)
FPR3
library(pROC)
roc_obj_All <- roc(Testbank$pep, PEPPrediction)
auc(roc_obj_All)
roc_obj_3 <- roc(Testbank$pep, PEPPrediction3)
auc(roc_obj_3)
?rpart
?quantile
